# -*- coding: utf-8 -*-
"""rps_settingup.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MPVMMzXhzmDkxofrp0rLY9JbK4dmLm1i
"""

# import content
import zipfile,os
from PIL import Image

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from keras.api._v2.keras import callbacks
import matplotlib.pyplot as plt
import pathlib

from tensorflow.keras.layers import Input
from tensorflow.keras.applications import MobileNetV2

# unzip data and get data
local_zip = '/content/drive/MyDrive/Colab Notebooks/shareFolder/flower_redonefix.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/')
zip_ref.close()

# get content files
basedir = '/content/flower_redonefix'
pathpng = basedir + '/Aster/' +'Aster-Test (1).png'
img = Image.open(pathpng)

print("The height of the image is: ", img.height)
print("The width of the image is: ", img.width)

# data processing
train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'wrap',
                    validation_split=0.2)

train_generator = train_datagen.flow_from_directory(
        basedir,
        target_size=(img.height, img.width),
        #class_mode='sparse',
        shuffle=True,
        subset='training')

validation_generator = train_datagen.flow_from_directory(
        basedir,
        target_size=(img.height, img.width),
        #class_mode='sparse',
        subset='validation')

# preparing AI and other variables


model = tf.keras.models.Sequential([
    MobileNetV2(weights="imagenet", include_top=False, input_tensor=Input(shape=(img.height, img.width, 3) ) ),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.1),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('val_accuracy') >= 0.92):
      print("\nVal Akurasi telah mencapai >92%!")
      self.model.stop_training = True
mmcallbacks = myCallback()

optimizerv = tf.optimizers.Adam(learning_rate=0.0001)
model.compile(loss=tf.keras.losses.CategoricalCrossentropy(),
              optimizer=optimizerv,
              metrics=['accuracy'])

# BOOM!
history = model.fit(
      train_generator,
      steps_per_epoch=20,
      epochs=120,
      validation_data=validation_generator,
      validation_steps=5,
      verbose=2, callbacks=[mmcallbacks])

#plot loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train Loss', 'Val Loss'], loc='upper right')
plt.show()

#plot accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train Accuracy', 'Val Accuracy'], loc='lower right')
plt.show()

# deployment???
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

tflite_model_file = pathlib.Path('rps.tflite')
tflite_model_file.write_bytes(tflite_model)