# -*- coding: utf-8 -*-
"""Copy of weatherIndian_attack.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HvULBetW-3elZIvR6DFDIfmj-z9yX24A

Submission Project
Proyek Pertama : Membuat Model Machine Learning dengan Data Time Series


Data profile
Nama : Handerson Loriano
Email : hadezbladez@gmail.com
"""

import numpy as np
import pandas as pd
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import tensorflow as tf
from keras.layers import Dense, LSTM

from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt

df = pd.read_csv('weather_Bhubhneshwar_1990_2022 - weather_Bhubhneshwar_1990_2022_redoneComp.csv')
df = df.drop(columns=["tmin","tmax","prcp","snow","wdir","wspd","wpgt","pres","tsun"])

df

# Normalization
df["tavg"] = (df["tavg"] - df["tavg"].mean()) / df["tavg"].std()
df

# value check
dates = df['time'].values
temp  = df['tavg'].values

df.isnull().sum()

# Threshold
threshold_mae = (df['tavg'].max() - df['tavg'].min()) * 10/100
threshold_mae

# plot is hanging so we need superpower of GPU
# is it because we dont scale it?
plt.figure(figsize=(15,5))
plt.plot(dates, temp)
plt.title('Temperature average',
          fontsize=20);

dates_latih, dates_test, temp_latih, temp_test = train_test_split(dates, temp, test_size=0.2, shuffle=False)

# define data

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')< 0.1 and logs.get('loss') < 0.2 ):
      print("\nMAE kurang dari < 10%!")
      self.model.stop_training = True
callbacksv = myCallback()


# model bake

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

optimizer = tf.keras.optimizers.SGD(learning_rate=0.1, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

train_set = windowed_dataset(temp_latih, window_size=60, batch_size=100, shuffle_buffer=1000)

history = model.fit(train_set, callbacks=[callbacksv],epochs=1219)